name: Test & Deploy Azure Functions (Python)
on:
  push:
    branches: ["main"]
  workflow_dispatch:
permissions:
  contents: read
  id-token: write  # Required for Azure login
env:
  FUNCTIONAPP_DIR: "."
  PYTHON_VERSION: "3.12"
concurrency:
  group: deploy-azure-func
  cancel-in-progress: true
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: pip
          cache-dependency-path: requirements.txt
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc g++ python3-dev
      - name: Validate requirements.txt
        working-directory: ${{ env.FUNCTIONAPP_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -f requirements.txt ]; then
            echo "ERROR: requirements.txt not found" >&2
            exit 1
          fi
          grep -q "yfinance.*==.*0\.2\.48" requirements.txt || { echo "ERROR: yfinance==0.2.48 missing in requirements.txt" >&2; exit 1; }
          grep -q "peewee.*==.*3\.18\.2" requirements.txt || { echo "ERROR: peewee==3.18.2 missing in requirements.txt" >&2; exit 1; }
      - name: Install runtime deps
        working-directory: ${{ env.FUNCTIONAPP_DIR }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt --no-cache-dir
      - name: Install test deps
        working-directory: ${{ env.FUNCTIONAPP_DIR }}
        run: |
          if [ -f requirements-dev.txt ]; then
            pip install -r requirements-dev.txt --no-cache-dir
          else
            pip install pytest
          fi
      - name: Run tests
        working-directory: ${{ env.FUNCTIONAPP_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          if compgen -G "tests/test_*.py" > /dev/null || compgen -G "*_test.py" > /dev/null; then
            pytest -q
          else
            echo "No tests found (tests/test_*.py or *_test.py). Skipping."
          fi
  deploy:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: pip
          cache-dependency-path: requirements.txt
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc g++ python3-dev
      - name: Check pip configuration
        working-directory: ${{ env.FUNCTIONAPP_DIR }}
        shell: bash
        run: |
          python -m pip config list
      - name: Validate requirements.txt
        working-directory: ${{ env.FUNCTIONAPP_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -f requirements.txt ]; then
            echo "ERROR: requirements.txt not found" >&2
            exit 1
          fi
          grep -q "yfinance.*==.*0\.2\.48" requirements.txt || { echo "ERROR: yfinance==0.2.48 missing in requirements.txt" >&2; exit 1; }
          grep -q "peewee.*==.*3\.18\.2" requirements.txt || { echo "ERROR: peewee==3.18.2 missing in requirements.txt" >&2; exit 1; }
      - name: Prebuild dependencies into .python_packages
        working-directory: ${{ env.FUNCTIONAPP_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          TARGET=".python_packages/lib/site-packages"
          mkdir -p "$TARGET"
          python -m pip install --upgrade pip wheel
          echo "Installing dependencies with retry..."
          for attempt in {1..3}; do
            echo "Attempt $attempt..."
            python -m pip install --target "$TARGET" -r requirements.txt --verbose > pip_install.log 2>&1 && break
            echo "Retry $attempt failed, waiting 5 seconds..."
            sleep 5
            if [ $attempt -eq 3 ]; then
              echo "ERROR: pip install failed after 3 attempts" >&2
              cat pip_install.log
              exit 1
            fi
          done
          cat pip_install.log
          if grep -i "error" pip_install.log; then
            echo "ERROR: pip install encountered errors" >&2
            exit 1
          fi
          echo "Verifying installed packages..."
          python - << 'PY'
          import os, pkgutil, sys
          sp = os.path.join(os.getcwd(), ".python_packages", "lib", "site-packages")
          sys.path.insert(0, sp)
          needed = ["azure.functions","openai","dotenv","yfinance","pandas","numpy","requests","bs4","praw","nltk","peewee","lxml","html5lib","platformdirs","pytz","frozendict","multitasking"]
          missing = [m for m in needed if not pkgutil.find_loader(m)]
          if missing:
              print(f"Missing in .python_packages: {missing}", file=sys.stderr)
              sys.exit(1)
          print("Vendored wheels present ✅")
          PY
      - name: Verify .python_packages contents
        working-directory: ${{ env.FUNCTIONAPP_DIR }}
        run: |
          set -euo pipefail
          echo "Listing .python_packages contents..."
          ls -R .python_packages/lib/site-packages > packages.txt
          cat packages.txt
          grep -q "^yfinance$" packages.txt || { echo "ERROR: yfinance directory not found in .python_packages" >&2; exit 1; }
          grep -q "^peewee\.py$" packages.txt || { echo "ERROR: peewee.py file not found in .python_packages" >&2; exit 1; }
          echo "yfinance and peewee found in .python_packages ✅"
      - name: Create zip package
        working-directory: ${{ env.FUNCTIONAPP_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          echo "Creating release.zip..."
          zip -r release.zip . -x "venv/*" ".git/*" "*.pyc" "__pycache__/*" ".gitignore" ".funcignore" "*.md" "*.log"
          ls -l release.zip
          echo "Verifying zip contents..."
          unzip -l release.zip > zip_contents.txt
          cat zip_contents.txt
          grep -q ".python_packages/lib/site-packages/yfinance/" zip_contents.txt || { echo "ERROR: yfinance directory not in release.zip" >&2; exit 1; }
          grep -q ".python_packages/lib/site-packages/peewee\.py" zip_contents.txt || { echo "ERROR: peewee.py file not in release.zip" >&2; exit 1; }
          echo "yfinance and peewee found in release.zip ✅"
      - name: Upload artifact for debugging
        uses: actions/upload-artifact@v4
        with:
          name: release-zip
          path: ${{ env.FUNCTIONAPP_DIR }}/release.zip
      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Ensure run-from-package deployment
        shell: bash
        run: |
          set -euo pipefail
          APP="${{ secrets.AZURE_FUNCTIONAPP_NAME }}"
          RG="$(az functionapp list --query "[?name=='${APP}'].resourceGroup" -o tsv)"
          az webapp config appsettings set -g "$RG" -n "$APP" --settings WEBSITE_RUN_FROM_PACKAGE=1
          echo "Waiting for configuration to apply..."
          sleep 10  # Allow time for Azure to propagate the setting
      - name: Verify WEBSITE_RUN_FROM_PACKAGE
        shell: bash
        run: |
          set -euo pipefail
          APP="${{ secrets.AZURE_FUNCTIONAPP_NAME }}"
          RG="$(az functionapp list --query "[?name=='${APP}'].resourceGroup" -o tsv)"
          SETTING=$(az webapp config appsettings list --name "${APP}" --resource-group "${RG}" --query "[?name=='WEBSITE_RUN_FROM_PACKAGE'].value" -o tsv)
          if [ "$SETTING" != "1" ]; then
            echo "ERROR: WEBSITE_RUN_FROM_PACKAGE is not set to 1" >&2
            exit 1
          fi
          echo "WEBSITE_RUN_FROM_PACKAGE is correctly set to 1 ✅"
      - name: Disable Oryx server build
        shell: bash
        run: |
          set -euo pipefail
          APP="${{ secrets.AZURE_FUNCTIONAPP_NAME }}"
          RG="$(az functionapp list --query "[?name=='${APP}'].resourceGroup" -o tsv)"
          az webapp config appsettings set -g "$RG" -n "$APP" --settings \
            SCM_DO_BUILD_DURING_DEPLOYMENT=false \
            ENABLE_ORYX_BUILD=false
      - name: Deploy to Azure Functions
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ secrets.AZURE_FUNCTIONAPP_NAME }}
          package: ${{ env.FUNCTIONAPP_DIR }}/release.zip
      - name: Post-deploy sanity check
        shell: bash
        run: |
          set -euo pipefail
          APP="${{ secrets.AZURE_FUNCTIONAPP_NAME }}"
          RG="$(az functionapp list --query "[?name=='${APP}'].resourceGroup" -o tsv)"
          HOST="$(az functionapp show --name "${APP}" --resource-group "${RG}" --query "defaultHostName" -o tsv)"
          echo "Default domain: https://${HOST}"
          az functionapp function list --name "${APP}" --resource-group "${RG}" -o table || true
          echo "Try a function at: https://${HOST}/api/DailyRunner"