name: Test & Deploy Azure Functions (Python)

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read

env:
  FUNCTIONAPP_DIR: "."          # change if your function app is in a subfolder
  PYTHON_VERSION: "3.12"        # MATCHES your Azure Functions Python worker

concurrency:
  group: deploy-azure-func
  cancel-in-progress: true

jobs:
  # -------------------------
  # 1) TEST JOB (must pass)
  # -------------------------
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install runtime deps (venv)
        working-directory: ${{ env.FUNCTIONAPP_DIR }}
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            echo "WARNING: requirements.txt not found; proceeding."
          fi

      - name: Install test deps
        working-directory: ${{ env.FUNCTIONAPP_DIR }}
        run: |
          if [ -f requirements-dev.txt ]; then
            pip install -r requirements-dev.txt
          else
            pip install pytest
          fi

      - name: Run tests (skip gracefully if none)
        working-directory: ${{ env.FUNCTIONAPP_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          if compgen -G "tests/test_*.py" > /dev/null || compgen -G "*_test.py" > /dev/null; then
            pytest -q
          else
            echo "No tests found (tests/test_*.py or *_test.py). Skipping."
          fi

  # -------------------------
  # 2) DEPLOY JOB (after tests)
  # -------------------------
  deploy:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python (build wheels for the SAME version as the host)
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      # PREBUILD all deps into .python_packages using ONLY binary wheels (no compiling).
      # This avoids ABI mismatches and guarantees yfinance/numpy/pandas are present.
      - name: Prebuild dependencies into .python_packages
        working-directory: ${{ env.FUNCTIONAPP_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip wheel
          if [ -f requirements.txt ]; then
            # Force binary wheels only, targeting the Functions site-packages path.
            python -m pip install --only-binary=:all: -r requirements.txt \
              --target ".python_packages/lib/site-packages"
          else
            echo "WARNING: requirements.txt not found; proceeding without extra dependencies."
          fi
          # Sanity: print a few key packages that MUST exist
          python - << 'PY'
          import os, pkgutil, sys
          sp = os.path.join(os.getcwd(), ".python_packages", "lib", "site-packages")
          assert os.path.isdir(sp), f"site-packages not found at {sp}"
          sys.path.insert(0, sp)
          missing = [m for m in ["numpy","pandas","yfinance","requests"] if not pkgutil.find_loader(m)]
          if missing:
            raise SystemExit(f"Missing expected wheels in .python_packages: {missing}")
          print("Vendored wheels present: numpy/pandas/yfinance/requests ✅")
          PY

      - name: Ensure run-from-package deployment
        run: echo "WEBSITE_RUN_FROM_PACKAGE=1" >> $GITHUB_ENV

      - name: Azure login (Service Principal)
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Make sure we are NOT relying on Oryx (we’re shipping wheels ourselves).
      - name: Disable Oryx server build (idempotent)
        shell: bash
        run: |
          APP="${{ secrets.AZURE_FUNCTIONAPP_NAME }}"
          RG="$(az functionapp list --query "[?name=='${APP}'].resourceGroup" -o tsv)"
          az webapp config appsettings set -g "$RG" -n "$APP" --settings \
            SCM_DO_BUILD_DURING_DEPLOYMENT=false \
            ENABLE_ORYX_BUILD=false

      - name: Deploy to Azure Functions (zip with vendored deps)
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ secrets.AZURE_FUNCTIONAPP_NAME }}
          package: ${{ env.FUNCTIONAPP_DIR }}

      # Post-deploy sanity: host & functions
      - name: Post-deploy sanity check
        shell: bash
        run: |
          set -euo pipefail
          APP="${{ secrets.AZURE_FUNCTIONAPP_NAME }}"
          RG="$(az functionapp list --query "[?name=='${APP}'].resourceGroup" -o tsv)"
          HOST="$(az functionapp show --name "${APP}" --resource-group "${RG}" --query "defaultHostName" -o tsv)"
          echo "Default domain: https://${HOST}"
          az functionapp function list --name "${APP}" --resource-group "${RG}" -o table || true
          echo "Try a function at: https://${HOST}/api/<your-function-name>"