deploy:
  runs-on: ubuntu-latest
  needs: test
  steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history to avoid git issues
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}  # 3.12
        cache: none  # Disable pip cache
    - name: Validate requirements.txt
      working-directory: ${{ env.FUNCTIONAPP_DIR }}
      shell: bash
      run: |
        set -euo pipefail
        if [ ! -f requirements.txt ]; then
          echo "ERROR: requirements.txt not found" >&2
          exit 1
        fi
        grep -q "yfinance" requirements.txt || { echo "ERROR: yfinance missing in requirements.txt" >&2; exit 1; }
    - name: Prebuild dependencies into .python_packages
      working-directory: ${{ env.FUNCTIONAPP_DIR }}
      shell: bash
      run: |
        set -euo pipefail
        TARGET=".python_packages/lib/site-packages"
        mkdir -p "$TARGET"
        python -m pip install --upgrade pip wheel
        echo "Installing dependencies..."
        python -m pip install --only-binary=:all: --target "$TARGET" -r requirements.txt --verbose > pip_install.log 2>&1
        cat pip_install.log
        if grep -i "error" pip_install.log; then
          echo "ERROR: pip install encountered errors" >&2
          exit 1
        fi
        echo "Verifying installed packages..."
        python - << 'PY'
        import os, pkgutil, sys
        sp = os.path.join(os.getcwd(), ".python_packages", "lib", "site-packages")
        sys.path.insert(0, sp)
        needed = ["azure.functions","openai","dotenv","yfinance","pandas","numpy","requests","bs4","praw","nltk","peewee","lxml","html5lib","platformdirs","pytz","frozendict","multitasking"]
        missing = [m for m in needed if not pkgutil.find_loader(m)]
        if missing:
            print(f"Missing in .python_packages: {missing}", file=sys.stderr)
            sys.exit(1)
        print("Vendored wheels present ✅")
        PY
    - name: Verify .python_packages contents
      working-directory: ${{ env.FUNCTIONAPP_DIR }}
      run: |
        set -euo pipefail
        echo "Listing .python_packages contents..."
        ls -R .python_packages/lib/site-packages > packages.txt
        cat packages.txt
        grep -q "yfinance" packages.txt || { echo "ERROR: yfinance not found in .python_packages" >&2; exit 1; }
        echo "yfinance found in .python_packages ✅"
    - name: Create zip package
      working-directory: ${{ env.FUNCTIONAPP_DIR }}
      shell: bash
      run: |
        set -euo pipefail
        echo "Creating release.zip..."
        zip -r release.zip . -x "venv/*" ".git/*" "*.pyc" "__pycache__/*" ".gitignore" ".funcignore" "*.md" "*.log"
        ls -l release.zip
        echo "Verifying zip contents..."
        unzip -l release.zip > zip_contents.txt
        cat zip_contents.txt
        grep -q ".python_packages/lib/site-packages/yfinance" zip_contents.txt || { echo "ERROR: yfinance not in release.zip" >&2; exit 1; }
        echo "yfinance found in release.zip ✅"
    - name: Ensure run-from-package deployment
      run: echo "WEBSITE_RUN_FROM_PACKAGE=1" >> $GITHUB_ENV
    - name: Azure login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: Disable Oryx server build
      shell: bash
      run: |
        set -euo pipefail
        APP="${{ secrets.AZURE_FUNCTIONAPP_NAME }}"
        RG="$(az functionapp list --query "[?name=='${APP}'].resourceGroup" -o tsv)"
        az webapp config appsettings set -g "$RG" -n "$APP" --settings \
          SCM_DO_BUILD_DURING_DEPLOYMENT=false \
          ENABLE_ORYX_BUILD=false
    - name: Deploy to Azure Functions
      uses: Azure/functions-action@v1
      with:
        app-name: ${{ secrets.AZURE_FUNCTIONAPP_NAME }}
        package: ${{ env.FUNCTIONAPP_DIR }}/release.zip
    - name: Verify WEBSITE_RUN_FROM_PACKAGE
      shell: bash
      run: |
        set -euo pipefail
        APP="${{ secrets.AZURE_FUNCTIONAPP_NAME }}"
        RG="$(az functionapp list --query "[?name=='${APP}'].resourceGroup" -o tsv)"
        SETTING=$(az webapp config appsettings list --name "${APP}" --resource-group "${RG}" --query "[?name=='WEBSITE_RUN_FROM_PACKAGE'].value" -o tsv)
        if [ "$SETTING" != "1" ]; then
          echo "ERROR: WEBSITE_RUN_FROM_PACKAGE is not set to 1" >&2
          exit 1
        fi
        echo "WEBSITE_RUN_FROM_PACKAGE is correctly set to 1 ✅"
    - name: Post-deploy sanity check
      shell: bash
      run: |
        set -euo pipefail
        APP="${{ secrets.AZURE_FUNCTIONAPP_NAME }}"
        RG="$(az functionapp list --query "[?name=='${APP}'].resourceGroup" -o tsv)"
        HOST="$(az functionapp show --name "${APP}" --resource-group "${RG}" --query "defaultHostName" -o tsv)"
        echo "Default domain: https://${HOST}"
        az functionapp function list --name "${APP}" --resource-group "${RG}" -o table || true
        echo "Try a function at: https://${HOST}/api/DailyRunner"